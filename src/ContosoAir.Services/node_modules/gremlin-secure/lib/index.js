'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.bindForClient = exports.makeTemplateTag = undefined;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.createClient = createClient;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _gremlinTemplateString = require('gremlin-template-string');

var _gremlinTemplateString2 = _interopRequireDefault(_gremlinTemplateString);

var _GremlinClient = require('./GremlinClient');

var _GremlinClient2 = _interopRequireDefault(_GremlinClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createClient(port, host, options) {
  if ((typeof port === 'undefined' ? 'undefined' : _typeof(port)) === 'object') {
    options = port;
    port = undefined;
  }

  if ((typeof host === 'undefined' ? 'undefined' : _typeof(host)) === 'object') {
    options = host;
    host = undefined;
  }

  return new _GremlinClient2.default(port, host, options);
};

/**
 * Given a query object, returns a Promise of executing that query with a
 * given client.
 * @param  {GremlinClient} client Gremlin client to execute queries with
 * @param  {Object} query  A query Object { gremlin: String, bindings: Object }
 * @return {Promise} Promise of execution of the query
 */
var makePromise = function makePromise(client, query) {
  var promise = new Promise(function (resolve, reject) {
    return client.execute(query, function (err, results) {
      return err ? reject(err) : resolve(results);
    });
  });
  // Let's attach the query for easier debugging
  promise.query = query;

  return promise;
};

var makeTemplateTag = exports.makeTemplateTag = function makeTemplateTag(client) {
  return function () {
    return makePromise(client, _gremlinTemplateString2.default.apply(undefined, arguments));
  };
};

/**
 * Given a map of functions returning query objects, returns a map
 * of function promising execution of these queries with the given Gremlin
 * client.
 *
 * @param  {GremlinClient} client Gremlin client to execute queries with
 * @param  {Object<String, Function<Object>>} functions
 * @return {Object<String, Function<Promise<Results>>>}
 */
var bindForClient = exports.bindForClient = function bindForClient(client, functions) {
  return (0, _lodash2.default)(functions).mapValues(function (fn) {
    return function () {
      return makePromise(client, fn.apply(undefined, arguments));
    };
  }).value();
};

exports.default = {
  createClient: createClient,
  makeTemplateTag: makeTemplateTag,
  bindForClient: bindForClient
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJjcmVhdGVDbGllbnQiLCJwb3J0IiwiaG9zdCIsIm9wdGlvbnMiLCJ1bmRlZmluZWQiLCJtYWtlUHJvbWlzZSIsImNsaWVudCIsInF1ZXJ5IiwicHJvbWlzZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXhlY3V0ZSIsImVyciIsInJlc3VsdHMiLCJtYWtlVGVtcGxhdGVUYWciLCJiaW5kRm9yQ2xpZW50IiwiZnVuY3Rpb25zIiwibWFwVmFsdWVzIiwiZm4iLCJ2YWx1ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O1FBTWdCQSxZLEdBQUFBLFk7O0FBTmhCOzs7O0FBQ0E7Ozs7QUFFQTs7Ozs7O0FBR08sU0FBU0EsWUFBVCxDQUFzQkMsSUFBdEIsRUFBNEJDLElBQTVCLEVBQWtDQyxPQUFsQyxFQUEyQztBQUNoRCxNQUFJLFFBQU9GLElBQVAseUNBQU9BLElBQVAsT0FBZ0IsUUFBcEIsRUFBOEI7QUFDNUJFLGNBQVVGLElBQVY7QUFDQUEsV0FBT0csU0FBUDtBQUNEOztBQUVELE1BQUksUUFBT0YsSUFBUCx5Q0FBT0EsSUFBUCxPQUFnQixRQUFwQixFQUE4QjtBQUM1QkMsY0FBVUQsSUFBVjtBQUNBQSxXQUFPRSxTQUFQO0FBQ0Q7O0FBRUQsU0FBTyw0QkFBa0JILElBQWxCLEVBQXdCQyxJQUF4QixFQUE4QkMsT0FBOUIsQ0FBUDtBQUNEOztBQUdEOzs7Ozs7O0FBT0EsSUFBTUUsY0FBYyxTQUFkQSxXQUFjLENBQUNDLE1BQUQsRUFBU0MsS0FBVCxFQUFtQjtBQUNyQyxNQUFNQyxVQUFVLElBQUlDLE9BQUosQ0FBWSxVQUFDQyxPQUFELEVBQVVDLE1BQVY7QUFBQSxXQUMxQkwsT0FBT00sT0FBUCxDQUFlTCxLQUFmLEVBQXNCLFVBQUNNLEdBQUQsRUFBTUMsT0FBTjtBQUFBLGFBQ3BCRCxNQUFNRixPQUFPRSxHQUFQLENBQU4sR0FBb0JILFFBQVFJLE9BQVIsQ0FEQTtBQUFBLEtBQXRCLENBRDBCO0FBQUEsR0FBWixDQUFoQjtBQUtBO0FBQ0FOLFVBQVFELEtBQVIsR0FBZ0JBLEtBQWhCOztBQUVBLFNBQU9DLE9BQVA7QUFDRCxDQVZEOztBQVlPLElBQU1PLDRDQUFrQixTQUFsQkEsZUFBa0IsQ0FBQ1QsTUFBRDtBQUFBLFNBQzdCO0FBQUEsV0FBc0JELFlBQVlDLE1BQVosRUFBb0IsMkRBQXBCLENBQXRCO0FBQUEsR0FENkI7QUFBQSxDQUF4Qjs7QUFHUDs7Ozs7Ozs7O0FBU08sSUFBTVUsd0NBQWdCLFNBQWhCQSxhQUFnQixDQUFDVixNQUFELEVBQVNXLFNBQVQ7QUFBQSxTQUF1QixzQkFBRUEsU0FBRixFQUNqREMsU0FEaUQsQ0FDdkMsVUFBQ0MsRUFBRDtBQUFBLFdBQVE7QUFBQSxhQUFhZCxZQUFZQyxNQUFaLEVBQW9CYSw4QkFBcEIsQ0FBYjtBQUFBLEtBQVI7QUFBQSxHQUR1QyxFQUVqREMsS0FGaUQsRUFBdkI7QUFBQSxDQUF0Qjs7a0JBS1E7QUFDYnBCLDRCQURhO0FBRWJlLGtDQUZhO0FBR2JDO0FBSGEsQyIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgdGVtcGxhdGUgZnJvbSAnZ3JlbWxpbi10ZW1wbGF0ZS1zdHJpbmcnO1xuXG5pbXBvcnQgR3JlbWxpbkNsaWVudCBmcm9tICcuL0dyZW1saW5DbGllbnQnO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVDbGllbnQocG9ydCwgaG9zdCwgb3B0aW9ucykge1xuICBpZiAodHlwZW9mIHBvcnQgPT09ICdvYmplY3QnKSB7XG4gICAgb3B0aW9ucyA9IHBvcnQ7XG4gICAgcG9ydCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgaG9zdCA9PT0gJ29iamVjdCcpIHtcbiAgICBvcHRpb25zID0gaG9zdDtcbiAgICBob3N0ID0gdW5kZWZpbmVkO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBHcmVtbGluQ2xpZW50KHBvcnQsIGhvc3QsIG9wdGlvbnMpO1xufTtcblxuXG4vKipcbiAqIEdpdmVuIGEgcXVlcnkgb2JqZWN0LCByZXR1cm5zIGEgUHJvbWlzZSBvZiBleGVjdXRpbmcgdGhhdCBxdWVyeSB3aXRoIGFcbiAqIGdpdmVuIGNsaWVudC5cbiAqIEBwYXJhbSAge0dyZW1saW5DbGllbnR9IGNsaWVudCBHcmVtbGluIGNsaWVudCB0byBleGVjdXRlIHF1ZXJpZXMgd2l0aFxuICogQHBhcmFtICB7T2JqZWN0fSBxdWVyeSAgQSBxdWVyeSBPYmplY3QgeyBncmVtbGluOiBTdHJpbmcsIGJpbmRpbmdzOiBPYmplY3QgfVxuICogQHJldHVybiB7UHJvbWlzZX0gUHJvbWlzZSBvZiBleGVjdXRpb24gb2YgdGhlIHF1ZXJ5XG4gKi9cbmNvbnN0IG1ha2VQcm9taXNlID0gKGNsaWVudCwgcXVlcnkpID0+wqB7XG4gIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PlxuICAgIGNsaWVudC5leGVjdXRlKHF1ZXJ5LCAoZXJyLCByZXN1bHRzKSA9PlxuICAgICAgZXJyID8gcmVqZWN0KGVycikgOiByZXNvbHZlKHJlc3VsdHMpXG4gICAgKVxuICApO1xuICAvLyBMZXQncyBhdHRhY2ggdGhlIHF1ZXJ5IGZvciBlYXNpZXIgZGVidWdnaW5nXG4gIHByb21pc2UucXVlcnkgPSBxdWVyeTtcblxuICByZXR1cm4gcHJvbWlzZTtcbn1cblxuZXhwb3J0IGNvbnN0IG1ha2VUZW1wbGF0ZVRhZyA9IChjbGllbnQpID0+XG4gICguLi5ncmVtbGluQ2h1bmtzKSA9PiBtYWtlUHJvbWlzZShjbGllbnQsIHRlbXBsYXRlKC4uLmdyZW1saW5DaHVua3MpKTtcblxuLyoqXG4gKiBHaXZlbiBhIG1hcCBvZiBmdW5jdGlvbnMgcmV0dXJuaW5nIHF1ZXJ5IG9iamVjdHMsIHJldHVybnMgYSBtYXBcbiAqIG9mIGZ1bmN0aW9uIHByb21pc2luZyBleGVjdXRpb24gb2YgdGhlc2UgcXVlcmllcyB3aXRoIHRoZSBnaXZlbiBHcmVtbGluXG4gKiBjbGllbnQuXG4gKlxuICogQHBhcmFtICB7R3JlbWxpbkNsaWVudH0gY2xpZW50IEdyZW1saW4gY2xpZW50IHRvIGV4ZWN1dGUgcXVlcmllcyB3aXRoXG4gKiBAcGFyYW0gIHtPYmplY3Q8U3RyaW5nLCBGdW5jdGlvbjxPYmplY3Q+Pn0gZnVuY3Rpb25zXG4gKiBAcmV0dXJuIHtPYmplY3Q8U3RyaW5nLCBGdW5jdGlvbjxQcm9taXNlPFJlc3VsdHM+Pj59XG4gKi9cbmV4cG9ydCBjb25zdCBiaW5kRm9yQ2xpZW50ID0gKGNsaWVudCwgZnVuY3Rpb25zKSA9PiBfKGZ1bmN0aW9ucylcbiAgLm1hcFZhbHVlcygoZm4pID0+ICguLi5hcmdzKSA9PiBtYWtlUHJvbWlzZShjbGllbnQsIGZuKC4uLmFyZ3MpKSlcbiAgLnZhbHVlKCk7XG5cblxuZXhwb3J0IGRlZmF1bHQge1xuICBjcmVhdGVDbGllbnQsXG4gIG1ha2VUZW1wbGF0ZVRhZyxcbiAgYmluZEZvckNsaWVudFxufVxuIl19